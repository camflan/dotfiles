#!/bin/sh
#
# A pre-push hook that detects new TODO/FIXME/etc comments added in the commits
# being pushed and prompts the user to confirm before proceeding.
#
# This hook delegates to the 'todos' script which can also be run standalone.
#
# Called by "git push" after it has checked the remote status, but before anything
# has been pushed. If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

# We need to check if there's anything actually being pushed
has_refs=false

while read local_ref local_oid remote_ref remote_oid
do
    if test "$local_oid" = "$zero"
    then
        # Handle delete - nothing to check
        continue
    fi

    has_refs=true

    # For the todos script, we just need to run it once
    # It will automatically detect the right comparison range
    break
done

# Only run the check if we're actually pushing something
if [ "$has_refs" = true ]; then
    # Try to find the todos script
    # Check if it's in PATH first
    if command -v todos >/dev/null 2>&1; then
        todos -i
        exit $?
    # Check in common locations
    elif [ -x "$HOME/bin/todos" ]; then
        "$HOME/bin/todos" -i
        exit $?
    elif [ -x "$HOME/.local/bin/todos" ]; then
        "$HOME/.local/bin/todos" -i
        exit $?
    else
        # Fallback: script not found, allow push but warn
        echo "Warning: 'todos' script not found in PATH" >&2
        exit 0
    fi
fi

exit 0
